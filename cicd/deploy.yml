# this is just a copy for review. Live workflow at: .github/workflows/deploy.yml

name: deploy-staging

on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # required for OIDC
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-central-1
  CLUSTER: sparkrock-assignment-staging-cluster
  SERVICE: sparkrock-assignment-staging-svc
  ECR_FRONTEND: 888577031400.dkr.ecr.eu-central-1.amazonaws.com/sparkrock-assignment-staging-frontend
  ECR_BACKEND:  888577031400.dkr.ecr.eu-central-1.amazonaws.com/sparkrock-assignment-staging-backend
  ECR_PROXY:    888577031400.dkr.ecr.eu-central-1.amazonaws.com/sparkrock-assignment-staging-proxy

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::888577031400:role/sparkrock-assignment-staging-gha-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push frontend
        run: |
          docker build -t "$ECR_FRONTEND:latest" -t "$ECR_FRONTEND:${GITHUB_SHA}" app/frontend
          docker push "$ECR_FRONTEND:latest"
          docker push "$ECR_FRONTEND:${GITHUB_SHA}"

      - name: Build & push backend
        run: |
          docker build -t "$ECR_BACKEND:latest" -t "$ECR_BACKEND:${GITHUB_SHA}" app/backend
          docker push "$ECR_BACKEND:latest"
          docker push "$ECR_BACKEND:${GITHUB_SHA}"

      - name: Build & push proxy
        run: |
          docker build -t "$ECR_PROXY:latest" -t "$ECR_PROXY:${GITHUB_SHA}" app/nginx
          docker push "$ECR_PROXY:latest"
          docker push "$ECR_PROXY:${GITHUB_SHA}"
          
      - name: Verify AWS identity & CLI
        run: |
          aws --version
          aws sts get-caller-identity

      - name: Roll ECS service
        run: aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment --desired-count 1

